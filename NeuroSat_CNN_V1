import tensorflow as tf
import keras
from tensorflow.keras.utils import to_categorical
import numpy as np
from os.path import dirname, join as pjoin
import scipy.io as sio
print(tf.version.VERSION)


#load training Data from .mat files 

mat_fname = pjoin('Training_Data\Training_Data01', 'set1.mat')
set1 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data02', 'set2.mat')
set2 = sio.loadmat(mat_fname)

#mat_fname = pjoin('Training_Data\Training_Data03', 'set3.mat')
#set3 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data04', 'set4.mat')
set4 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data05', 'set5.mat')
set5 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data06', 'set6.mat')
set6 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data07', 'set7.mat')
set7 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data08', 'set8.mat')
set8 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data09', 'set9.mat')
set9 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data10', 'set10.mat')
set10 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data11', 'set11.mat')
set11 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data12', 'set12.mat')
set12 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data13', 'set13.mat')
set13 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data14', 'set14.mat')
set14 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data15', 'set15.mat')
set15 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data16', 'set16.mat')
set16 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data17', 'set17.mat')
set17 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data18', 'set18.mat')
set18 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data19', 'set19.mat')
set19 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data20', 'set20.mat')
set20 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data21', 'set21.mat')
set21 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data22', 'set22.mat')
set22 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data23', 'set23.mat')
set23 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data24', 'set24.mat')
set24 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data25', 'set25.mat')
set25 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data26', 'set26.mat')
set26 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data27', 'set27.mat')
set27 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data28', 'set28.mat')
set28 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data29', 'set29.mat')
set29 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data30', 'set30.mat')
set30 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data31', 'set31.mat')
set31 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data32', 'set32.mat')
set32 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data33', 'set33.mat')
set33 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data34', 'set34.mat')
set34 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data35', 'set35.mat')
set35 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data36', 'set36.mat')
set36 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data37', 'set37.mat')
set37 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data38', 'set38.mat')
set38 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data39', 'set39.mat')
set39 = sio.loadmat(mat_fname)

mat_fname = pjoin('Training_Data\Training_Data40', 'set40.mat')
set40 = sio.loadmat(mat_fname)

# Prepare training data
labels = np.append(set1['Payload_configuration_t'],set2['Payload_configuration_t'])
labels = np.append(labels,set4['Payload_configuration_t'])
labels = np.append(labels,set5['Payload_configuration_t'])
labels = np.append(labels,set6['Payload_configuration_t'])
labels = np.append(labels,set7['Payload_configuration_t'])
labels = np.append(labels,set8['Payload_configuration_t'])
labels = np.append(labels,set9['Payload_configuration_t'])
labels = np.append(labels,set10['Payload_configuration_t'])
labels = np.append(labels,set11['Payload_configuration_t'])
labels = np.append(labels,set12['Payload_configuration_t'])
labels = np.append(labels,set13['Payload_configuration_t'])
labels = np.append(labels,set14['Payload_configuration_t'])
labels = np.append(labels,set15['Payload_configuration_t'])
labels = np.append(labels,set16['Payload_configuration_t'])
labels = np.append(labels,set17['Payload_configuration_t'])
labels = np.append(labels,set18['Payload_configuration_t'])
labels = np.append(labels,set19['Payload_configuration_t'])
labels = np.append(labels,set20['Payload_configuration_t'])
labels = np.append(labels,set21['Payload_configuration_t'])
labels = np.append(labels,set22['Payload_configuration_t'])
labels = np.append(labels,set23['Payload_configuration_t'])
labels = np.append(labels,set24['Payload_configuration_t'])
labels = np.append(labels,set25['Payload_configuration_t'])
labels = np.append(labels,set26['Payload_configuration_t'])
labels = np.append(labels,set27['Payload_configuration_t'])
labels = np.append(labels,set28['Payload_configuration_t'])
labels = np.append(labels,set29['Payload_configuration_t'])
labels = np.append(labels,set30['Payload_configuration_t'])
labels = np.append(labels,set31['Payload_configuration_t'])
labels = np.append(labels,set32['Payload_configuration_t'])
labels = np.append(labels,set33['Payload_configuration_t'])
labels = np.append(labels,set34['Payload_configuration_t'])
labels = np.append(labels,set35['Payload_configuration_t'])
labels = np.append(labels,set36['Payload_configuration_t'])
labels = np.append(labels,set37['Payload_configuration_t'])
labels = np.append(labels,set38['Payload_configuration_t'])
labels = np.append(labels,set39['Payload_configuration_t'])
labels = np.append(labels,set40['Payload_configuration_t'])
#print(labels)
#print(len(labels))

data=np.zeros((len(labels),set1['Traffic_Matrix0001'].shape[0],set1['Traffic_Matrix0001'].shape[1],1))

#set1
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set1[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set1[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set1[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x-1,:,:] = TM3D
        

#set2
for x in range (1,3):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set2[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+100-1,:,:] = TM3D
        
#set4
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set4[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+102-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set4[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+102-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set4[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+102-1,:,:] = TM3D    
        
#set5
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set5[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+202-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set5[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+202-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set5[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+202-1,:,:] = TM3D 
        
#set6
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set6[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+302-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set6[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+302-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set6[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+302-1,:,:] = TM3D 

#set7
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set7[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+402-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set7[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+402-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set7[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+402-1,:,:] = TM3D 

#set8
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set8[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+502-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set8[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+502-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set8[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+502-1,:,:] = TM3D 

#set9
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set9[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+602-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set9[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+602-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set9[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+602-1,:,:] = TM3D 
        

#set10
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set10[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+702-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set10[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+702-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set10[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+702-1,:,:] = TM3D 
        
#set11
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set11[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+802-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set11[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+802-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set11[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+802-1,:,:] = TM3D
        

#set12
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set12[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+902-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set12[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+902-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set12[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+902-1,:,:] = TM3D

#set13
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set13[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1002-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set13[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1002-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set13[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1002-1,:,:] = TM3D
        
#set14
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set14[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1102-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set14[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1102-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set14[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1102-1,:,:] = TM3D    
        
#set15
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set15[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1202-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set15[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1202-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set15[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1202-1,:,:] = TM3D 
        
#set16
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set16[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1302-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set16[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1302-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set16[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1302-1,:,:] = TM3D 

#set17
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set17[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1402-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set17[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1402-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set17[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1402-1,:,:] = TM3D 

#set18
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set18[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1502-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set18[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1502-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set18[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1502-1,:,:] = TM3D 

#set19
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set19[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1602-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set19[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1602-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set19[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1602-1,:,:] = TM3D 
        

#set20
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set20[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1702-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set20[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1702-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set20[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1702-1,:,:] = TM3D 

        
#set21
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set21[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1802-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set21[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1802-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set21[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1802-1,:,:] = TM3D
        

#set22
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set22[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1902-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set22[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1902-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set22[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+1902-1,:,:] = TM3D

#set23
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set23[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2002-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set23[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2002-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set23[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2002-1,:,:] = TM3D
        
#set24
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set24[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2102-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set24[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2102-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set24[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2102-1,:,:] = TM3D    
        
#set25
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set25[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2202-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set25[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2202-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set25[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2202-1,:,:] = TM3D 
        
#set26
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set26[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2302-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set26[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2302-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set26[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2302-1,:,:] = TM3D 

#set27
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set27[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2402-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set27[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2402-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set27[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2402-1,:,:] = TM3D 

#set28
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set28[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2502-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set28[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2502-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set28[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2502-1,:,:] = TM3D 

#set29
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set29[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2602-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set29[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2602-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set29[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2602-1,:,:] = TM3D 
        

#set30
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set30[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2702-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set30[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2702-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set30[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2702-1,:,:] = TM3D 
        
        
#set31
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set31[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2802-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set31[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2802-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set31[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2802-1,:,:] = TM3D
        

#set32
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set32[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2902-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set32[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2902-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set32[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+2902-1,:,:] = TM3D

#set33
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set33[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3002-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set33[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3002-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set33[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3002-1,:,:] = TM3D
        
#set34
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set34[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3102-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set34[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3102-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set34[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3102-1,:,:] = TM3D    
        
#set35
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set35[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3202-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set35[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3202-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set35[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3202-1,:,:] = TM3D 
        
#set36
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set36[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3302-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set36[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3302-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set36[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3302-1,:,:] = TM3D 

#set37
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set37[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3402-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set37[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3402-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set37[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3402-1,:,:] = TM3D 

#set38
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set38[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3502-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set38[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3502-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set38[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3502-1,:,:] = TM3D 

#set39
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set39[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3602-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set39[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3602-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set39[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3602-1,:,:] = TM3D 
        

#set40
for x in range (1,101):
    if x < 10:
        name = 'Traffic_Matrix000' + str(x)
        TM2D=set40[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3702-1,:,:] = TM3D
        
    if x in range(10, 100):
        name = 'Traffic_Matrix00' + str(x)
        TM2D=set40[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3702-1,:,:] = TM3D
        
    if x == 100:
        name = 'Traffic_Matrix0' + str(x)
        TM2D=set40[name]
        TM3D = TM2D.reshape((TM2D.shape[0], TM2D.shape[1], 1))
        data[x+3702-1,:,:] = TM3D 

#preprocesing and normalization
#import math
data1 = data
print(np.amax(data))
data1 [data!=0] = np.log10(data1[data!=0])
print(np.amax(data1))
data_norm=data/np.amax(data)
print(np.amax(data_norm))

#onehot= to_categorical(labels, num_classes=len(np.unique(labels)))
import pandas as pd
C= str(np.unique(labels))
print(C)
s = pd.Series(['14977', '39745', '45249', '49369', '49533', '49537', '52609', '55673', '55677'], dtype="category")
print(s.cat.categories)
#
labels [labels == 14977] = 0
labels [labels == 39745] = 1
labels [labels == 45249] = 2
labels [labels == 49369] = 3
labels [labels == 49533] = 4
labels [labels == 49537] = 5
labels [labels == 52609] = 6
labels [labels == 55673] = 7
labels [labels == 55677] = 8
C= str(np.unique(labels))
print(C)
onehot= to_categorical(labels, num_classes=len(np.unique(labels)))

#training data splitting
np.random.seed(100)

indices = np.random.permutation(data.shape[0])

valid_cnt = int(data.shape[0] * 0.2)

#test_cnt = int(data.shape[0] * 0.1)

#valid_idx, test_idx, training_idx = indices[:valid_cnt],\
#                         indices[valid_cnt:valid_cnt+test_cnt],indices[valid_cnt+test_cnt:]

valid_idx, training_idx = indices[:valid_cnt],\
                         indices[valid_cnt:]
  
#valid, test, train = data[valid_idx,:],\
#              data[test_idx,:],data[training_idx,:]

valid, train = data[valid_idx,:],\
              data[training_idx,:]
  
#onehot_valid, onehot_test, onehot_train = onehot[valid_idx,:],onehot[test_idx,:],\
#                        onehot[training_idx,:]

onehot_valid, onehot_train = onehot[valid_idx,:],\
                        onehot[training_idx,:]

#train=train.reshape([-1,train.shape[1],train.shape[2],1])
#test=test.reshape([-1,test.shape[1],test.shape[2],1])

print('Training Data Shape=', train.shape , '\nValid Data Shape=', valid.shape)

#defina su modelo
from keras.models import Sequential

from keras.layers import MaxPooling2D, Dropout, Dense, Flatten

from keras.layers import Convolution2D as Conv2D

model = Sequential()

# 
model.add(Conv2D(8, (5, 5), activation='relu', input_shape=(381, 651,1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(4, (5, 5), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#model.add(Conv2D(4, (3, 3), activation='relu'))
#model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64, activation='relu'))
#model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
#model.add(Dense(32, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(9, activation='softmax'))

model.summary()

#Compilar modelo
from tensorflow.keras.optimizers import SGD


model.compile(loss='categorical_crossentropy',
              optimizer=SGD(learning_rate=0.01, decay=1e-6, momentum=0.9, nesterov=True),
              metrics=['accuracy'])
              
# validation_data permite ver la evaluación en la prueba mientras se entrena
history=model.fit(train, onehot_train,
         epochs=15,
         batch_size=128,
         validation_data=(valid, onehot_valid),
         verbose=1)
         
# Plot the accuracy curves
import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'],'bo')
plt.plot(history.history['val_accuracy'],'rX')
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.grid()
plt.show()
# summarize history for loss
plt.plot(history.history['loss'],'bo')
plt.plot(history.history['val_loss'],'rX')
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.grid()
plt.show()

from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay, classification_report
from sklearn.preprocessing import MinMaxScaler

categories = ["14977", "39745", "45249", "49369", "49533", "49537", "52609", "55673", "55677"]

y_pred = model.predict(valid)   #prediccion
#print(y_pred)
classes_y=np.argmax(y_pred,axis=1) #prediccion
print(classes_y)

test_labels = np.argmax(onehot_valid,axis=1) # TRUE GROUND
#print(test_labels)

#Matriz de confusion

#cm = confusion_matrix(test_labels,classes_y)
#disp = ConfusionMatrixDisplay(confusion_matrix=9, display_labels=categories)
accuracy_score(test_labels ,classes_y)

#disp.plot()

# Evaluation
traffic_b_t = []
traffic_b_t = np.append(set1['Trafic_beam_t'],set2['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set4['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set5['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set6['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set7['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set8['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set9['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set10['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set11['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set12['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set13['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set14['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set15['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set16['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set17['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set18['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set19['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set20['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set21['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set22['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set23['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set24['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set25['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set26['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set27['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set28['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set29['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set30['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set31['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set32['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set33['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set34['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set35['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set36['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set37['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set38['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set39['Trafic_beam_t'], axis=0)
traffic_b_t = np.append(traffic_b_t,set40['Trafic_beam_t'], axis=0)
#print(traffic_b_t.shape)
#print(traffic_b_t)

valid_traffic_b_t=traffic_b_t[valid_idx,:]
#print(valid_traffic_b_t.shape)

#from labels to capacity
valid_capacity_b_t=np.zeros(valid_traffic_b_t.shape)
valid_capacity_b_t [classes_y == 0,:] = [471.631160020696,471.631160020696,471.631160020696,471.631160020696,471.631160020696,471.631160020696,667.482676364401,471.631160020696] #Mbps
valid_capacity_b_t [classes_y == 1,:] = [471.631160020696,471.631160020696,471.631160020696,471.631160020696,471.631160020696,471.631160020696,850.928754778667,471.631160020696] #Mbps
valid_capacity_b_t [classes_y == 2,:] = [471.631160020696,471.631160020696,471.631160020696,471.631160020696,471.631160020696,562.542134655601,850.928754778667,471.631160020696] #Mbps #Mbps
valid_capacity_b_t [classes_y == 3,:] = [471.631160020696,471.631160020696,562.542134655601,850.928754778667,667.482676364401,1033.42132709278,850.928754778667,471.631160020696] #Mbps
valid_capacity_b_t [classes_y  == 4,:] = [471.631160020696,471.631160020696,667.482676364401,850.928754778667,850.928754778667,1033.42132709278,850.928754778667,471.631160020696] #Mbps
valid_capacity_b_t [classes_y == 5,:] = [471.631160020696,471.631160020696,471.631160020696,471.631160020696,471.631160020696,471.631160020696,652.521529205147,471.631160020696] #Mbps
valid_capacity_b_t [classes_y == 6,:] = [471.631160020696,471.631160020696,471.631160020696,471.631160020696,471.631160020696,471.631160020696,1033.42132709278,471.631160020696] #Mbps
valid_capacity_b_t [classes_y == 7,:] = [471.631160020696,471.631160020696,471.631160020696,667.482676364401,667.482676364401,1033.42132709278,1033.42132709278,471.631160020696] #Mbps
valid_capacity_b_t [classes_y == 8,:] = [471.631160020696,471.631160020696,667.482676364401,667.482676364401,667.482676364401,1033.42132709278,1033.42132709278,471.631160020696] #Mbps
#print(valid_capacity_b_t [classes_y == 1,:])

# Plot evaluation
sample = 120 #choose the sample you wish to evaluate
beams= list(range(1, 9))
plt.plot(beams,valid_traffic_b_t[sample,:],'bo')
plt.plot(beams,valid_capacity_b_t[sample,:],'rX')
plt.title('model accuracy')
plt.ylabel('Mbps')
plt.xlabel('beam')
plt.legend(['Traffic', 'Capacity'], loc='upper left')
plt.grid()
plt.show()

#save model .h5
model.save('NeuroSat_FlexiblePayload_model.h5')
